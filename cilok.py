# -*- coding: utf-8 -*-
"""cilok.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pfi76GQahkV5JpGtpwqveKFQU2-hbn7S

### Tugas
"""

class Employee:
    def __init__(self, name, salary, password):
        self.name = name          # Public attribute
        self._salary = salary     # Protected attribute
        self.__password = password # Private attribute

    def update_gaji(self, gaji_baru, password):
        if password == self.__password:
            self._salary = gaji_baru
            print(f"Gaji berhasil diperbarui. Gaji baru adalah: {self._salary}")
        else:
            print("Password salah. Gaji tidak diperbarui.")

    def informasi_karyawan(self):
        print(f"Nama: {self.name}")
        print(f"Gaji: {self._salary}")

karyawan = Employee("Akbar Kopling", 500000, "12345")

karyawan.informasi_karyawan()
#bner
karyawan.update_gaji(1000000, "12345")

karyawan.informasi_karyawan()
#slah
karyawan.update_gaji(7000000, "54321")

"""### Latihan 1

"""

class BankAccount:
    def __init__(self, account_number, balance, pin):
        self.account_number = account_number  # Public member
        self._balance = balance               # Protected member
        self.__pin = pin                      # Private member

    def deposit(self, amount, pin):
        if pin == self.__pin:
            self._balance += amount
            print(f"Deposit successful! New balance: {self._balance}")
        else:
            print("Invalid PIN. Transaction failed.")

    def withdraw(self, amount, pin):
        if pin == self.__pin:
            if amount <= self._balance:
                self._balance -= amount
                print(f"Withdrawal successful! New balance: {self._balance}")
            else:
                print("Insufficient balance.")
        else:
            print("Invalid PIN. Transaction failed.")

    def check_balance(self, pin):
        if pin == self.__pin:
            print(f"Your balance is: {self._balance}")
        else:
            print("Invalid PIN.")

# Membuat objek dari kelas BankAccount
account = BankAccount("12345678", 1000, "4321")

# Akses public member
print(account.account_number)  # Output: 12345678

# Akses protected member
print(account._balance)        # Output: 1000

# Akses private mamber tidak diizinkan
# print(account.__pin)         # Error: AttributeError

# Menggunakan method  untuk berinteraksi
account.deposit(500, "4321")   # Output: Deposit successful! New balance: 1500
account.withdraw(200, "4321")  # Output: Withdrawal successful! New balance: 1300
account.check_balance("4321")  # Output: Your balance is: 1300

# Jika pin salah
account.withdraw(200, "1111")  # Output: Invalid PIN. Transaction failed.

"""### Latihan 2"""

class Student:
    def __init__(self, name, gpa, student_id):
        self.name = name           # Public member
        self._gpa = gpa            # Protected member
        self.__student_id = student_id # Private member

    def display_info(self):
        print(f"Student Name: {self.name}")
        print(f"GPA: {self._gpa}")

    def __display_student_id(self):
        print(f"Student ID: {self.__student_id}")

# Membuat objek dri kelas student
student = Student("Alice", 3.7, "S12345")

# Akses atribut publik
print(student.name)  # Output: Alice

# Akses atribut protected
print(student._gpa)  # Output: 3.7

# Akses atribut private akan mengahilkan error
# print(student.__student_id)  # Error: AttributeError

# Namun bisa diakses mengggunkan name mangling
print(student._Student__student_id)  # Output: S12345

# Akses metode menggunakanan name mungling
student._Student__display_student_id()  # Output: Student ID: S12345